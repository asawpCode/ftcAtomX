/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.robotcontroller.external.samples;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;




@TeleOp(name="Calminator", group="Op")
//@Disabled
public class Calminator extends Op {

    private ElapsedTime runtime = new ElapsedTime();
    private Motor leftFront = null;
    private Motor rightFront = null;
    private Motor leftRear = null;
    private Motor rightRear = null;

    private Servo servoLeft = null;  // spate
    private Servo servoRight = null; // spate
    private Servo servoArmLeft = null; // brat
    private Servo servoArmRight = null; // brat


    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        leftFront  = hardwareMap.get(Motor.class, "left_drive");
        rightFront = hardwareMap.get(Motor.class, "right_drive");
        leftRear = hardwareMap.get(Motor,class, "left_drive1");
        rightRear = hardwareMap.get(Motor,class, "right_drive2");
        servoLeft = hardwareMap.get(Servo,class, "left_servo");
        servoRight = hardwareMap.get(Servo,class, "right_servo");
        servoArmLeft = hardwareMap.get(Servo,class, "arm_left");
        servoArmRight = hardwareMap.get(Servo,class, "arm_right");

        leftFront.setDirection(Motor.Direction.FORWARD);
        rightFront.setDirection(Motor.Direction.REVERSE);
        leftRear.setDirection(Motor.Direction.FORWARD);
        rightRear.setDirection(Motor.Direction.REVERSE);

        waitForStart();
        runtime.reset();


        while (opModeIsActive()) {


            double leftFrontPower;
            double rightFrontPower;
            double leftRearPower;
            double rightRearPower;

            double drive = -gamepad1.left_stick_y;
            double turn  =  gamepad1.right_stick_x;

            leftFrontPower = Range.clip(drive + turn, -1.0, 1.0) ;
            rightFrontPower = Range.clip(drive - turn, -1.0, 1.0) ;
            leftRearPower = Range.clip(drive + turn, -1.0, 1.0) ;
            rightRearPower = Range.clip(drive - turn, -1.0, 1.0) ;

            leftFront.setPower(leftFrontPower);
            rightFront.setPower(rightFrontPower);
            leftRear.setPower(leftRearPower);
            rightRear.setPower(rightRearPower);

            if(gamepad1.y) {        // 0 grade
                servoArmLeft.setPosition(0);
                servoArmRight.setPosition(0);

            }
            else if(gamepad1.x){             // 90 grade
                servoArmLeft.setPosition(0.5);
                servoArmRight.setPosition(0.5);
            }
            else if(gamepad1.a){             // 180 grade
                servoArmLeft.setProsition(1);
                servoArmRight.setPosition(1);
            }
            telemetry.addData("Servo Position", servoArmLeft.getPosition(), servoArmRight.getPosition());
            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
            telemetry.update();


        }
    }
}
